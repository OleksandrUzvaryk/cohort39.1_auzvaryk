public class Classwork {
    public static void main(String[] args) {
        String str = "hello"; // [address1]
        str = "morning"; // [address83]

        // garbage collector - сборщик мусора,
        // который удаляет неиспользуемые ресурсы, на которые никто не ссылается

        // в нашем примере, будет освобождена ячейка по адресу [address1], тк в строке 4,
        // мы изменили значение пременной  str и теперь она хранит ссылку с адресом [address83],
        // а ссылку с адресом [address1] никто больше не использует, следовательно,
        // ее содержимое больше никому не потребуется.

        // можно вызвать garbage collector самостоятельно, чтобы очистить ресурсы системы следующим образом:
        System.gc();

        // особенность в том, что система даже после вызова команды в строке 15 сама решит следует ли
        // сейчас освобождать память или нет, тк работа garbage collector ресурсозатратна.

        String str20 = "new value"; // [address1]

        // в случае, если к моменту создания переменной str2 ячейка памяти будет освобождена, то в нее МОЖЕТ
        // быть записано новое значение, а может быть задействована какая-то другая пустая ячейка.
        // Распределение рандомное, но только СРЕДИ ПУСТЫХ ячеек. Невозможно занять уже занятую ячейку


        // Для строк, как для самых популярных ссылочных объектов, в heap (куче) выделен отдельный участок - пул
        // констант строк. В случае, если в пуле уже есть строка с одним значением, она не будет создана повторно.
        // Все строки, созданные без использования ключевого слова new попадают туда:
        String example = "just new string for pool of string"; // попадет в пул констант

        // Но можно "расположить" строку в heap (куче), как все другие объекты, обхявив ее при помощи ключевого слова new:
        String heapString = new String("string from heap");

        // проверить можно, сравнив ссылки на объекты:

        String str1 = "abc";
        String str2 = "abc";
        String str3 = new String("abc");
        String str4 = new String("abc");

        // при помощи "==" сравниваются ссылки (но не значения!).
        // true - если ссылки ведут к одному участку памяти,
        // false - если к разным

        System.out.println(str1 == str2); // true
        System.out.println(str1 == str3); // false
        System.out.println(str3 == str4); // false
    }
}
